program = _{ SOI ~ struct_block* ~ EOI }

struct_block = _{ main_block | shared_block | always_block }
main_block   =  { "main" ~ "{" ~ stmt* ~ "}" }
shared_block =  { "shared" ~ "{" ~ decl_stmt* ~ "}" }
always_block =  { "always" ~ "{" ~ expr_stmt* ~ "}" }

block = { "{" ~ stmt* ~ "}" }

stmt = _{ assign_stmt | expr_stmt | print_stmt | if_stmt | while_stmt | block | decl_stmt }

decl_stmt    = _{ decl ~ ";" }
decl         =  { decl_keyword ~ IDENTIFIER ~ (":" ~ DATATYPE)? ~ ("=" ~ expr)? }
decl_keyword =  { "let" | "const" }

assign_stmt     = _{ assignment ~ ";" }
assignment      =  { IDENTIFIER ~ assign_op ~ expr | IDENTIFIER ~ assign_unary_op }
assign_op       =  { "=" | "+=" | "-=" | "*=" | "/=" | "%=" }
assign_unary_op =  { "++" | "--" }

print_stmt = { "print" ~ "(" ~ expr ~ ")" ~ ";" }
if_stmt    = { "if" ~ "(" ~ expr ~ ")" ~ block ~ ("else" ~ block)? }
while_stmt = { "while" ~ "(" ~ expr ~ ")" ~ block }

expr_stmt = _{ expr ~ ";" }
expr      =  { prefix? ~ primary ~ (infix ~ prefix? ~ primary)* }
infix     = _{ add | sub | mul | div | modulo | eq | ne | lt | le | gt | ge | and | or }
prefix    = _{ neg | not }
add       =  { "+" }
sub       =  { "-" }
mul       =  { "*" }
div       =  { "/" }
modulo    =  { "%" }
eq        =  { "==" }
ne        =  { "!=" }
lt        =  { "<" }
le        =  { "<=" }
gt        =  { ">" }
ge        =  { ">=" }
and       =  { "&&" }
or        =  { "||" }
neg       =  { "-" }
not       =  { "!" }

primary = _{ BOOLEAN | FLOAT | INTEGER | STRING | IDENTIFIER | NULL | "(" ~ expr ~ ")" }

DATATYPE = { "bool" | "int" | "float" | "void" | "string" }

INTEGER    = @{ ASCII_DIGIT+ }
FLOAT      = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
STRING     = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
IDENTIFIER = @{ !(RESERVED_IDENTIFIER ~ !IDENTIFIER_CHAR) ~ ASCII_ALPHA ~ IDENTIFIER_CHAR* }
BOOLEAN    = @{ "true" | "false" }
NULL       = @{ "null" }

IDENTIFIER_CHAR     = _{ ASCII_ALPHANUMERIC | "_" }
RESERVED_IDENTIFIER =  { "let" | "const" | "print" | "true" | "false" | "null" | "main" | "shared" | "always" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE    = _{ "\n" | "\r" | "\r\n" }

COMMENT        = _{ INLINE_COMMENT | BLOCK_COMMENT }
INLINE_COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }
BLOCK_COMMENT  = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
