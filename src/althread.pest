/// # Althread Grammar
/// This file defines the grammar for the Althread programming language,

program = _{ SOI ~ blocks* ~ EOI }

/// ## Program Structure
/// The main building blocks of an Althread program are:
/// - **Main Brick**: The entry point of the program.
/// - **Shared Brick**: Declares global variables accessible across different parts of the program.
/// - **Condition Brick**: Monitors conditions at each atomic step (e.g., always, never, eventually).
/// - **Process Brick**: Encapsulates code that runs concurrently in parallel processes.
blocks = _{ main_block | global_block | condition_block | process_block }

global_block    = { SHARED_KEYWORD ~ "{" ~ declaration_statements ~ "}" }
condition_block = { condition_keywords ~ "{" ~ expression_statements ~ "}" }
process_block   = { PROCESS_KEYWORD ~ identifier ~ "(" ~ ")" ~ "{" ~ statements ~ "}" }
main_block      = { MAIN_KEYWORD ~ "{" ~ statements ~ "}" }

condition_keywords = { ALWAYS_KEYWORD | NEVER_KEYWORD | EVENTUALLY_KEYWORD }

/// ## Statements
/// Statements are the executable instructions in the language.
/// They include assignments, declarations, expressions, print statements,
/// function calls, and control flow structures.
stmt                  =  { assignment_statement | declaration_statement | expression_statement | print_statement | run_statement | if_control | while_control | scope }
assignment_statement  = _{ assignment ~ ";" }
declaration_statement = _{ declaration ~ ";" }
expression_statement  = _{ expression ~ ";" }
run_statement         = _{ run_call ~ ";" }
print_statement       = _{ print_call ~ ";" }

statements             = { stmt* }
expression_statements  = { expression_statement* }
declaration_statements = { declaration_statement* }

/// ### Assignments
/// Assignments assign values to variables.
/// - **Unary Assignments**: Increment or decrement a variable (e.g., a++).
/// - **Binary Assignments**: Assign the result of an expression to a variable (e.g., a = b + c).
assignment = { unary_assignment | binary_assignment }

unary_assignment          = { identifier ~ unary_assignment_operator }
unary_assignment_operator = { INC_OP | DEC_OP }

binary_assignment          = { identifier ~ binary_assignment_operator ~ expression }
binary_assignment_operator = { ASSING_OP | ADD_ASSIGN_OP | SUB_ASSIGN_OP | MUL_ASSIGN_OP | DIV_ASSIGN_OP | MOD_ASSIGN_OP }

/// ### Declarations
/// Declarations introduce new variables, which can be mutable (let) or immutable (const).
declaration         = { declaration_keyword ~ identifier ~ (":" ~ datatype)? ~ ("=" ~ expression)? }
declaration_keyword = { LET_KEYWORD | CONST_KEYWORD }

/// ### Expressions
/// Expressions evaluate values based on arithmetic and logical operations, following standard precedence rules.
expression = { binary_expression | unary_expression | primary_expression }

primary_expression = _{ BOOLEAN | FLOAT | INTEGER | STRING | NULL | IDENTIFIER | "(" ~ expression ~ ")" }

unary_expression = _{ unary_operator? ~ primary_expression }
unary_operator   =  { POS_OP | NEG_OP | NOT_OP }

binary_expression   = _{ unary_expression ~ (binary_operator ~ unary_expression)* }
binary_operator     = _{ or_operator | and_operator | equality_operator | comparison_operator | term_operator | factor_operator }
or_operator         =  { OR_OP }
and_operator        =  { AND_OP }
equality_operator   =  { EQ_OP | NE_OP }
comparison_operator =  { LT_OP | GT_OP | LE_OP | GE_OP }
term_operator       =  { ADD_OP | SUB_OP }
factor_operator     =  { MUL_OP | DIV_OP | MOD_OP }

/// ### Function Calls
/// Function calls include running parallel processes and printing to the console.
run_call   = { RUN_KEYWORD ~ identifier ~ "(" ~ ")" }
print_call = { PRINT_KEYWORD ~ "(" ~ expression ~ ")" }

/// ### Control Flow
/// Control flow structures include conditional execution and loops.
scope         = { "{" ~ stmt* ~ "}" }
if_control    = { IF_KEYWORD ~ "(" ~ expression ~ ")" ~ scope ~ (ELSE_KEYWORD ~ scope)? }
while_control = { WHILE_KEYWORD ~ "(" ~ expression ~ ")" ~ scope }

/// ## Tokens
/// This section defines the keywords, operators, datatypes, and other tokens used in Althread.

/// ### Keywords
/// Keywords define the core constructs of the language.
KEYWORDS = _{ MAIN_KEYWORD | SHARED_KEYWORD | PROCESS_KEYWORD | ALWAYS_KEYWORD | NEVER_KEYWORD | EVENTUALLY_KEYWORD | LET_KEYWORD | CONST_KEYWORD | IF_KEYWORD | ELSE_KEYWORD | WHILE_KEYWORD | RUN_KEYWORD | PRINT_KEYWORD | BOOLEAN | INT_DATATYPE | FLOAT_DATATYPE | STRING_DATATYPE | VOID_DATATYPE }

MAIN_KEYWORD       = _{ "main" }
SHARED_KEYWORD     = _{ "shared" }
PROCESS_KEYWORD    = _{ "process" }
ALWAYS_KEYWORD     =  { "always" }
NEVER_KEYWORD      =  { "never" }
EVENTUALLY_KEYWORD =  { "eventually" }

LET_KEYWORD   = { "let" }
CONST_KEYWORD = { "const" }

IF_KEYWORD    = _{ "if" }
ELSE_KEYWORD  = _{ "else" }
WHILE_KEYWORD = _{ "while" }

RUN_KEYWORD   = _{ "run" }
PRINT_KEYWORD = _{ "print" }

TRUE_KEYWORD  = _{ "true" }
FALSE_KEYWORD = _{ "false" }
NULL_KEYWORD  = _{ "null" }

/// ### Operators
/// Operators are used for arithmetic, logical operations, and assignments.
POS_OP = { "+" }
NEG_OP = { "-" }
NOT_OP = { "!" }

ADD_OP = { "+" }
SUB_OP = { "-" }
MUL_OP = { "*" }
DIV_OP = { "/" }
MOD_OP = { "%" }

EQ_OP  = { "==" }
NE_OP  = { "!=" }
LT_OP  = { "<" }
GT_OP  = { ">" }
LE_OP  = { "<=" }
GE_OP  = { ">=" }
AND_OP = { "&&" }
OR_OP  = { "||" }

ASSING_OP     = { "=" }
ADD_ASSIGN_OP = { "+=" }
SUB_ASSIGN_OP = { "-=" }
MUL_ASSIGN_OP = { "*=" }
DIV_ASSIGN_OP = { "/=" }
MOD_ASSIGN_OP = { "%=" }

INC_OP = { "++" }
DEC_OP = { "--" }

/// ### Datatypes
/// Datatypes supported in Althread include boolean, integer, float, string, and void.
datatype        = { BOOL_DATATYPE | INT_DATATYPE | FLOAT_DATATYPE | STRING_DATATYPE | VOID_DATATYPE }
BOOL_DATATYPE   = { "bool" }
INT_DATATYPE    = { "int" }
FLOAT_DATATYPE  = { "float" }
STRING_DATATYPE = { "string" }
VOID_DATATYPE   = { "void" }

/// ### Values
/// Values include literals such as booleans, integers, floats, strings, and null.
BOOLEAN = @{ TRUE_KEYWORD | FALSE_KEYWORD }
INTEGER = @{ ASCII_DIGIT+ }
FLOAT   = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
STRING  = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
NULL    = @{ NULL_KEYWORD }

/// ### Identifiers
/// Identifiers are used for naming variables, functions, and other constructs.
identifier        =  { IDENTIFIER }
IDENTIFIER        = @{ !reserved_keywords ~ ASCII_ALPHA ~ IDENTIFIER_CHAR* }
IDENTIFIER_CHAR   = _{ ASCII_ALPHANUMERIC | "_" }
reserved_keywords =  { (KEYWORDS | datatype) ~ !IDENTIFIER_CHAR }

/// ## Whitespace and Comments
/// Whitespace and comments are ignored by the parser.
WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE    = _{ "\n" | "\r" | "\r\n" }

COMMENT        = _{ INLINE_COMMENT | BLOCK_COMMENT }
INLINE_COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }
BLOCK_COMMENT  = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
