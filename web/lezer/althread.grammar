//!precedence

@precedence {
  member,
  newArgs,
  call,
  times @left,
  plus @left,
  rel @left,
  ternary @right,
  assign @right,
  wait_block,
  forIn,
  else,
  statement @cut
}


@top Project { project_block* }

project_block {
  GlobalBlock |
  MainBlock |
  ProgramBlock |
  ConditionBlock
}

GlobalBlock  { kw<"shared"> "{" shared_declaration* "}" }
MainBlock    { kw<"main"> code_block }
ProgramBlock { kw<"program"> ProgName "(" ")" code_block }
ConditionBlock { kw<"always"> expression_block }

code_block {
  !statement "{" statement* "}"
}
expression_block {
  !statement "{" (expression ";")* "}"
}

shared_declaration { 
  (kw<"let"> | kw<"const">)
  SharedVariableName ("=" expression)? semi }

statement {
  VariableDeclaration |
  WhileStatement |
  IfStatement |
  run_statement |
  send_statement |
  wait_statement |
  code_block |
  call_statement | 
  assignment_statement
}

//!assign

assignment_statement {
  AssignmentExpression semi
}
AssignmentExpression {
  identifier !assign UpdateOp expression
}


//!variabledeclaration

VariableDeclaration {
  (kw<"let"> | kw<"const">)
  LocalVariableName ("=" expression)? semi
}

//!whilestatement

WhileStatement {
  kw<"while"> expression code_block
}

//!ifstatement

IfStatement {
  kw<"if"> expression code_block (!else kw<"else"> code_block)?
}

//!run_statement

run_statement {
   RunExpression ";"
}
RunExpression { kw<"run"> ProgName ArgList }

//!send_statement

send_statement {
   SendExpression ";"
}
SendExpression { kw<"send"> object_identifier ArgList }

//!wait_statement
wait_statement  { kw<"wait"> (
      WaitingBlock 
    | WaitingBlockCase) }

WaitingBlock {
    (kw<"seq"> | kw<"first">) "{" WaitingBlockCase* "}"
}
WaitingBlockCase { 
   (ReceiveExpression | expression)
   (";" | ("=>" statement)) 
}

ReceiveExpression { kw<"receive"> object_identifier? pattern_list (!wait_block "=>" statement)? }

object_identifier { (identifier "." object_identifier) | identifier }

pattern_list { "(" pattern ("," pattern)* ")" }

pattern { LocalVariableName | Literal }

//!call_statement

call_statement {
   CallExpression ";"
}
CallExpression { FnName ArgList }


//!expression

expression[@isGroup=Expression] {
  Number |
  String |
  identifier ~arrow |
  @specialize[@name=BooleanLiteral]<LocalVariableName, "true" | "false"> |
  kw<"self"> |
  kw<"null"> |
  RegExp |
  UnaryExpression |
  ParenthesizedExpression |
  MemberExpression |
  BinaryExpression
}

//!expression_misc

ParenthesizedExpression { "(" expression ")" }

ArgList { "(" commaSep<"..."? expression> ")" }

//!property

propName { PropertyName | "[" expression "]" | Number | String }

Property {
  (propKw<"get"> | propKw<"set">)? propName ParamList Block |
  propName ~destructure (":" expression)? |
  "..." expression
}

//!operators

UnaryExpression {
  (kw<"void"> | kw<"typeof"> | kw<"delete"> | LogicOp<"!"> | ArithOp<"+" | "-">)
  expression
}

BinaryExpression {
  expression !times (ArithOp<"/"> | ArithOp<"%"> | ArithOp<"*">) expression |
  expression !plus ArithOp<"+" | "-"> expression |
  expression !rel CompareOp expression
}

MemberExpression {
  expression !member ("." PropertyName | "[" expression "]")
}

//!commaSep

commaSep<content> {
  (content ("," content)*)?
}

commaSep1<content> {
  content ("," content)*
}



Literal { String | Number }

kw<term> { @specialize[@name={term}]<LocalVariableName, term> }

identifier { SharedVariableName | LocalVariableName  }

//!semi

semi { ";" }

//!skip

@skip { spaces | newline | LineComment | BlockComment }

@skip {} {
  BlockComment { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd }
}

@local tokens {
  blockCommentEnd { "*/" }
  blockCommentNewline { "\n" }
  @else blockCommentContent
}

FnName { LocalVariableName | SharedVariableName }

@tokens {
  
  // Identifiers
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  identifierTail { (identifierChar | @digit)* }


  
  PropertyName { LocalVariableName | SharedVariableName }
  ProgName { LocalVariableName | SharedVariableName }
  LocalVariableName { $[a-z] identifierTail }
  SharedVariableName { $[A-Z] identifierTail }
  

//!numberTokens

  hex { @digit | $[a-fA-F] }
  
    Number {
    (@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*)
      (("e" | "E") ("+" | "-")? ("_" | @digit)+)? |
    @digit ("_" | @digit)* "n" |
    "0x" (hex | "_")+ "n"? |
    "0b" $[01_]+ "n"? |
    "0o" $[0-7_]+ "n"?
  }

  @precedence { Number "." }


//!operatorTokens

  ArithOp<expr> { expr }
  LogicOp<expr> { expr }

  UpdateOp { $[+\-/%*]? "=" }

  CompareOp { ("<" | ">" | "==" | "!=") }

//!regexpTokens

  RegExp { "/" (![/\\\n[] | "\\" ![\n] | "[" (![\n\\\]] | "\\" ![\n])* "]")+ ("/" $[gimsuy]*)? }

//!literalTokens

  "=" "..." "=>"
  "(" ")" "[" "]" "{" "}"
  "." "," ";" ":"
  
//!stringTokens

  String {
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"?
  }

  
//!skippedTokens

  spaces[@export] { $[\u0009 \u000b\u00a0]+ }

  newline[@export] { $[\r\n] }

  LineComment { "//" ![\n]* }
  
  @precedence { "/*", LineComment, ArithOp<"/"> }

  @precedence { "/*", LineComment, RegExp }
  
}
